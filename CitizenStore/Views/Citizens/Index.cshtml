@using Ext.Net;
@using Ext.Net.MVC;

@model IEnumerable<CitizenStore.Models.Citizen>
@*@model Ext.Net.Model*@

@{
    Layout = null;
    var X = Html.X();
    //var regularExp = "/^[A-ZА-Яа-яЁёa-z.'-]+$/";
}

<!DOCTYPE html>

<html>
<head>
    <title>Citizen Store</title>
   
    <link type="text/css" rel="stylesheet" href="http://speed.ext.net/www/intro/css/main.css" />
</head>
<body>
    @(Html.X().ResourceManager())


    <script>

        var onSuccess = function (grid, data) {
            grid.show();
            grid.getStore().loadData(data);
        };

        var checkEmptyFields = function (form, button) {
            var formIsValid = form.isValid();  
            var formValues1 = form.getForm().getValues();
            var emptyFieldsCounter = 0;
            Object.keys(formValues1).forEach(function (key, index) {
                if (this[key] == "")
                    emptyFieldsCounter = emptyFieldsCounter + 1;
            }, formValues1);
            //console.log(emptyFieldsCounter);
            if (emptyFieldsCounter == 5 | formIsValid == false) {
                button.setDisabled(true);
            } else
                button.setDisabled(false);

        };

        var checkFormValues = function (form, button) {
            var formIsValid = form.isValid();           
            //console.log("Form values:", form.getForm().getValues());
            button.setDisabled(!formIsValid);
        }

        var addCitizen = function (form, grid) {
            var formValues = form.getForm().getValues();            
            var dateParts = formValues["BirthDate"].split(".");
            var obj = new Citizen(formValues);            
            obj.data.BirthDate = new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);
            grid.store.insert(0, obj);
            form.getForm().reset();
        };

        var updateCitizen = function (form) {

            form.getForm().updateRecord();
        };

        Ext.apply(Ext.form.VTypes, {
            checkDate: function (val, field) {
                var begin = App.BeginBirthDate.getValue();
                var end = App.EndBirthDate.getValue();
                if (begin != null & end != null)
                    return end >= begin;
                else
                    return true;
            },  
            checkDateText: 'Конец периода даты рождения должно быть после начала периода даты рождения или в этот же день!',
        });

        Ext.apply(Ext.form.VTypes, {
            checkFieldsValues: function (val, field) {
                var fieldRegex = /^[A-ZА-Яа-яЁёa-z' \-*]+$/
                //var fieldRegex = /^[A-ZА-Яа-яЁёa-z'-]+\*{0,1}$/;
                return fieldRegex.test(val);
            },
            checkFieldsValuesText: "Поле может содержать только буквы кириллицы и латинского алфавита, а так же символы - ' ",
        });


        var onStoreException = function (proxy, response, operation) {
            var error = operation.getError(),
                message = Ext.isString(error) ? error : ('(' + error.status + ')' + error.statusText);

            Ext.net.Notification.show({
                iconCls: 'icon-exclamation',  
                html: message,
                title: 'Сообщение',
                autoScroll: true,
                hideDelay: 5000,
                width: 300,
                height: 200
            });
        };
                    //function Test(form) {
                    //    var jsondata = form.getForm().getValues();
                    //    console.log(jsondata);

                    //    var obj = new Citizen(jsondata);
                    //    console.log(obj);


                    //    return obj;
                    //}

    </script>



    @(
         X.Window()
         .ID("Window1")
         .Closable(false)
         .Resizable(false)
         .Height(425)
         .Icon(Icon.User)
         .Title("Условия поиска")
         .Draggable(true)
         .Width(550)
         .Modal(false)
         .BodyPadding(5)
         .DefaultButton("SearchButton")
         .Layout(LayoutType.Form)
         .Items(
         X.FormPanel()
             .ID("CitizenSearchForm")
             .Width(500)
             .DefaultAnchor("100%")
             .DefaultButton("SearchButton")
             .FieldDefaults(d =>
             {
                 d.LabelAlign = LabelAlign.Left;
             }
             )
                .Listeners(l =>
                {

                    l.FieldChange.Handler = "checkEmptyFields(App.CitizenSearchForm, App.SearchButton)";
                })

             .Items(
                 X.FieldSet()
                 .ColumnWidth(0.4)
                 .Title("Поиск")
                 .MarginSpec("0 0 0 10")

                 .Defaults(d =>
                 {
                     d.Add(new Parameter("LabelWidth", "150"));
                 }).Items(

                     X.TextField().Name("Surname").FieldLabel("Фамилия").Vtype("checkFieldsValues"),
                     X.TextField().Name("Name").FieldLabel("Имя").Vtype("checkFieldsValues"),
                     X.TextField().Name("Middlename").FieldLabel("Отчество").Vtype("checkFieldsValues"),
                     X.DateField().Name("BeginBirthDate").ID("BeginBirthDate").FieldLabel("Начало периода даты рождения").MaxDate(DateTime.Now).Vtype("checkDate"),
                     X.DateField().Name("EndBirthDate").ID("EndBirthDate").FieldLabel("Конец периода даты рождения").MaxDate(DateTime.Now).Vtype("checkDate")
                 )
             )
             )
             .Buttons(
                 X.Button().Text("Поиск").Icon(Icon.Magnifier).ID("SearchButton")
                 .Disabled(true)
                 .DirectEvents(de =>
                 {
                     de.Click.Url = Url.Action("Search");
                     de.Click.Json = true;
                     de.Click.ExtraParams.Add(new Parameter("model", "App.CitizenSearchForm.getForm().getValues()", ParameterMode.Raw));
                     de.Click.Success = "onSuccess(App.GridPanel1, result.data); App.Window2.show();";
                 }),

                 X.Button().Text("Выход").Icon(Icon.Cross).Handler("App.Window1.close();")
         )
    )

    @(
        X.Window()
           .ID("Window2")
           .Closable(false)
           .Resizable(false)
           .Hidden(true)
           .Height(500)
           .Icon(Icon.Table)
           .Title("Список анкет")
           .Draggable(true)
           .Width(700)
           .Modal(true)
           .BodyPadding(5)
           .Layout(LayoutType.Form)
           .Items(
           X.GridPanel()
               .ID("GridPanel1")
               .PaddingSpec("10 0")
               .ForceFit(true)
               .Height(410)
               .Store(
               X.StoreForModel()
               .ID("Store1")
               .PageSize(6)
               .AutoSync(true)
               .ShowWarningOnFailure(false)
               .Listeners(l =>
               {
                   l.Exception.Fn = "onStoreException";
                   l.Exception.Buffer = 10;
               })
               .SyncUrl(Url.Action("HandleChanges"))
               )

               .ColumnModel(
                    X.Column().Text("Фамилия").DataIndex("Surname"),
                    X.Column().Text("Имя").DataIndex("CitizenName"),
                    X.Column().Text("Отчество").DataIndex("Middlename"),
                    X.DateColumn().Text("Дата рождения").DataIndex("BirthDate").Format("dd.MM.yyyy"),
                    X.CommandColumn()
                      .Width(70)
                      .Commands(
                           Html.X().GridCommand()
                               .Text("Отмена")
                               .ToolTip(t =>
                               {
                                   t.Text = "Отмена изменений";
                               })
                               .CommandName("reject")
                               .Icon(Icon.ArrowUndo)
                      )
                      .PrepareToolbar(t =>
                      {
                          t.Handler = "toolbar.items.get(0).setVisible(record.dirty);";
                      })
                      .Listeners(l =>
                      {
                          l.Command.Handler = "record.reject();";
                      })
             )
               

                .TopBar(
                   X.Toolbar()
                   .Items(
                       X.Button().Text("Добавить").Icon(Icon.Add).Handler("App.AddCitizenWindow.show();"),
                       X.Button().Text("Изменить").Icon(Icon.BulletEdit).ID("EditButton").Handler("App.UpdateCitizenWindow.show();").Disabled(true),
                       X.Button().Text("Удалить").Icon(Icon.Delete).Handler("App.DeleteQuestionWindow.show();"),
                       X.ToolbarSeparator(),
                       X.Button().Text("Печать").Icon(Icon.Printer).HrefTarget("blank").Handler("console.log(App.GridPanel1.getRowsValues()); /*App.GridPanel1.print();*/ ").DirectEvents(de =>
                       {

                           de.Click.Action = "PrintData";
                           //de.Click.Method = HttpMethod.POST;
                           de.Click.Json = true;
                           de.Click.ExtraParams.Add(new Parameter("citizens", "App.GridPanel1.getRowsValues()", ParameterMode.Raw));
                           de.Click.Success = "window.open('/Citizens/Report', 'myNewWindow')";
                           //de.Click.IsUpload = true;
                       })
               )
               )
               .SelectionModel(X.RowSelectionModel().Mode(SelectionMode.Single)
                   .Listeners(l =>
                   {
                       l.Select.Handler = "App.UpdateCitizenForm.getForm().loadRecord(record); App.EditButton.setDisabled(false)";
                   })
               )
                .BottomBar(
                      Html.X().PagingToolbar().StoreID("Store1").HideRefresh(true)
                 )
               )
               .Buttons(X.Button().Text("Выход").Icon(Icon.Cross).Handler("App.Window2.close();"))
    )

    @(
                     X.Window()
                        .ID("UpdateCitizenWindow")
                        .Closable(false)
                        .Resizable(false)
                        .Hidden(true)
                        .Height(390)
                        .Width(450)
                        .Icon(Icon.UserEdit)
                        .Title("Анкета гражданина")
                        .Draggable(true)
                        .Modal(true)
                        .BodyPadding(5)
                        .DefaultButton("SaveButton")
                        .Layout(LayoutType.Form)
                        .Items(
                          X.FormPanel()
                             .ID("UpdateCitizenForm")
                             .Width(400)
                             .DefaultAnchor("100%")
                             .DefaultButton("SaveButton")
                             .FieldDefaults(d =>
                             {
                                 d.LabelAlign = LabelAlign.Left;
                                 //d.InputWidth = 100;
                             })
                            .Listeners(l =>
                            {
                                l.FieldValidityChange.Handler = "checkFormValues(App.UpdateCitizenForm, App.SaveButton)";
                            })
                 .Items(
                     X.FieldSet()
                     .ColumnWidth(0.4)
                     .Title("Анкета")
                     .MarginSpec("0 0 0 10")
                     .Defaults(d =>
                     {
                         d.Add(new Parameter("LabelWidth", "150"));
                         d.Add(new Parameter("AllowBlank", false));
                     })

                 .Items(

                     X.TextField().Name("Surname").FieldLabel("Фамилия").Vtype("checkFieldsValues"),
                     X.TextField().Name("CitizenName").FieldLabel("Имя").Vtype("checkFieldsValues"),
                     X.TextField().Name("Middlename").FieldLabel("Отчество").Vtype("checkFieldsValues"),
                     X.DateField().Name("BirthDate").FieldLabel("Дата рождения").Format("dd.MM.yyyy").MaxDate(DateTime.Now)
                 )
                 )
                 )
                 .Buttons(
                      X.Button().Text("Сохранить").ID("SaveButton").Icon(Icon.Add).Disabled(true)
                      .Handler("updateCitizen(App.UpdateCitizenForm); App.UpdateCitizenWindow.close();"),
                      X.Button().Text("Выход").Icon(Icon.Cross).Handler("App.UpdateCitizenWindow.close();")
                 )
    )


    @(
                 X.Window()
                    .ID("AddCitizenWindow")
                    .Closable(false)
                    .Resizable(false)
                    .Hidden(true)
                    .Height(390)
                    .Icon(Icon.UserAdd)
                    .Title("Анкета гражданина")
                    .Draggable(true)
                    .Width(500)
                    .Modal(true)
                    .BodyPadding(5)
                    .Layout(LayoutType.Form)
                    .DefaultButton("AddUserButton")
                    .Items(
                        X.FormPanel()
                           .ID("AddCitizenForm")
                           .Width(400)
                           .DefaultAnchor("100%")
                           .DefaultButton("AddUserButton")
                           .FieldDefaults(d =>
                           {
                               d.LabelAlign = LabelAlign.Left;
                           })
                           .Listeners(l =>
                           {
                               l.FieldValidityChange.Handler = "checkFormValues(App.AddCitizenForm, App.AddUserButton)";
                           })
                           .Items(
                               X.FieldSet()
                               .ColumnWidth(0.4)
                               .Title("Анкета")
                               .MarginSpec("0 0 0 10")
                               .Defaults(d =>
                               {
                                   d.Add(new Parameter("LabelWidth", "150"));
                                   d.Add(new Parameter("AllowBlank", false));
                               })

                                 .Items(
                                     X.TextField().Name("Surname").FieldLabel("Фамилия").Vtype("checkFieldsValues"),
                                     X.TextField().Name("CitizenName").FieldLabel("Имя").Vtype("checkFieldsValues"),
                                     X.TextField().Name("Middlename").FieldLabel("Отчество").Vtype("checkFieldsValues"),
                                     X.DateField().Name("BirthDate").FieldLabel("Дата рождения").Format("dd.MM.yyyy").MaxDate(DateTime.Now)

                                 )
                         )
                         )
                     .Buttons(
                          X.Button().Text("Добавить").Icon(Icon.Add).ID("AddUserButton").Handler("addCitizen(App.AddCitizenForm, App.GridPanel1); App.AddCitizenWindow.close();")
                          //.Handler("App.AddCitizenWindow.close(); /*App.AddCitizenForm.getForm().reset();*/ addCitizen(App.AddCitizenForm, App.GridPanel1);").Disabled(true)
                          //.DirectEvents(de =>
                          //{
                          //    de.Click.Url = Url.Action("Add");

                          //    de.Click.Method = HttpMethod.POST;

                          //    de.Click.Json = true;

                          //    de.Click.ExtraParams.Add(new Parameter("model", "App.AddCitizenForm.getForm().getValues()", ParameterMode.Raw));

                          //    de.Click.Success = "App.AddCitizenWindow.close(); App.SearchButton.click(); App.AddCitizenForm.getForm().reset();/* onSuccess(App.GridPanel1, result.data);*/";

                          //})
                          ,
                          X.Button().Text("Выход").Icon(Icon.Cross).Handler("App.AddCitizenWindow.close(); App.AddCitizenForm.getForm().reset()")

                    )
    )

    @(
         X.Window()
            .ID("DeleteQuestionWindow")
            .Closable(false)
            .Resizable(false)
            .Hidden(true)
            .Height(185)
            .Width(350)
            .Icon(Icon.UserDelete)
            .Title("Список анкет")
            .Draggable(true)
            .Modal(true)
            .BodyPadding(5)
            .Layout(LayoutType.Form)
            .Items(
             X.Panel()
                 .Items(
                     X.Label().Text("Вы уверены что хотите удалить пользователя?")
                 )
             )
            .Buttons(
                 X.Button().Text("Да").Icon(Icon.Accept).Handler("App.GridPanel1.deleteSelected(); App.DeleteQuestionWindow.close();"),
                 X.Button().Text("Нет").Icon(Icon.None).Handler("App.DeleteQuestionWindow.close();"))
    )
</body>
</html>